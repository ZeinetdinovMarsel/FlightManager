// <auto-generated />
using System;
using FM.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FM.DataAccess.Migrations
{
    [DbContext(typeof(FMDbContext))]
    [Migration("20250220233439_final")]
    partial class final
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AirportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("FederalDistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FederalDistrictId");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Москва",
                            FederalDistrictId = 1,
                            Name = "Шереметьево"
                        },
                        new
                        {
                            Id = 2,
                            City = "Москва",
                            FederalDistrictId = 1,
                            Name = "Домодедово"
                        },
                        new
                        {
                            Id = 3,
                            City = "Москва",
                            FederalDistrictId = 1,
                            Name = "Внуково"
                        },
                        new
                        {
                            Id = 4,
                            City = "Санкт-Петербург",
                            FederalDistrictId = 2,
                            Name = "Пулково"
                        },
                        new
                        {
                            Id = 5,
                            City = "Ростов-на-Дону",
                            FederalDistrictId = 3,
                            Name = "Платов"
                        },
                        new
                        {
                            Id = 6,
                            City = "Сочи",
                            FederalDistrictId = 3,
                            Name = "Сочи"
                        },
                        new
                        {
                            Id = 7,
                            City = "Минеральные Воды",
                            FederalDistrictId = 4,
                            Name = "Минеральные Воды"
                        },
                        new
                        {
                            Id = 8,
                            City = "Казань",
                            FederalDistrictId = 5,
                            Name = "Казань"
                        },
                        new
                        {
                            Id = 9,
                            City = "Нижний Новгород",
                            FederalDistrictId = 5,
                            Name = "Нижний Новгород"
                        },
                        new
                        {
                            Id = 10,
                            City = "Курган",
                            FederalDistrictId = 6,
                            Name = "Курган"
                        },
                        new
                        {
                            Id = 11,
                            City = "Екатеринбург",
                            FederalDistrictId = 6,
                            Name = "Екатеринбург"
                        },
                        new
                        {
                            Id = 12,
                            City = "Новосибирск",
                            FederalDistrictId = 7,
                            Name = "Толмачёво"
                        },
                        new
                        {
                            Id = 13,
                            City = "Красноярск",
                            FederalDistrictId = 7,
                            Name = "Красноярск"
                        },
                        new
                        {
                            Id = 14,
                            City = "Иркутск",
                            FederalDistrictId = 7,
                            Name = "Иркутск"
                        },
                        new
                        {
                            Id = 15,
                            City = "Владивосток",
                            FederalDistrictId = 8,
                            Name = "Владивосток"
                        },
                        new
                        {
                            Id = 16,
                            City = "Хабаровск",
                            FederalDistrictId = 8,
                            Name = "Хабаровск"
                        },
                        new
                        {
                            Id = 17,
                            City = "Якутск",
                            FederalDistrictId = 8,
                            Name = "Якутск"
                        },
                        new
                        {
                            Id = 18,
                            City = "Калининград",
                            FederalDistrictId = 2,
                            Name = "Калининград"
                        },
                        new
                        {
                            Id = 19,
                            City = "Уфа",
                            FederalDistrictId = 5,
                            Name = "Уфа"
                        },
                        new
                        {
                            Id = 20,
                            City = "Челябинск",
                            FederalDistrictId = 6,
                            Name = "Челябинск"
                        });
                });

            modelBuilder.Entity("FM.DataAccess.Entities.FederalDistrictEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("FederalDistricts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Центральный федеральный округ"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Северо-Западный федеральный округ"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Южный федеральный округ"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Северо-Кавказский федеральный округ"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Приволжский федеральный округ"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Уральский федеральный округ"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Сибирский федеральный округ"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Дальневосточный федеральный округ"
                        });
                });

            modelBuilder.Entity("FM.DataAccess.Entities.FlightEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AirplanePhotoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("AirportId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AirportId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AirplanePhotoUrl = "https://admspvoskresenskoe.ru/wp-content/uploads/Ezegodno-9-fevrala-v-Rossii-otmecaetsa-Den'-grazdanskoj-aviacii.jpg",
                            AirportId = 1,
                            ArrivalTime = new DateTime(2025, 2, 21, 3, 34, 39, 235, DateTimeKind.Utc).AddTicks(4835),
                            AvailableSeats = 180,
                            DepartureTime = new DateTime(2025, 2, 21, 1, 34, 39, 235, DateTimeKind.Utc).AddTicks(4829),
                            Destination = "Санкт-Петербург",
                            FlightNumber = "SU1001"
                        },
                        new
                        {
                            Id = 2,
                            AirplanePhotoUrl = "https://vesti-ural.ru/wp-content/uploads/2021/09/1590132398_4.jpeg",
                            AirportId = 1,
                            ArrivalTime = new DateTime(2025, 2, 21, 4, 34, 39, 235, DateTimeKind.Utc).AddTicks(4878),
                            AvailableSeats = 150,
                            DepartureTime = new DateTime(2025, 2, 21, 2, 34, 39, 235, DateTimeKind.Utc).AddTicks(4877),
                            Destination = "Екатеринбург",
                            FlightNumber = "SU1002"
                        },
                        new
                        {
                            Id = 3,
                            AirplanePhotoUrl = "https://avatars.mds.yandex.net/get-mpic/5221857/img_id9103962167301146378.jpeg/orig",
                            AirportId = 1,
                            ArrivalTime = new DateTime(2025, 2, 21, 2, 34, 39, 235, DateTimeKind.Utc).AddTicks(4881),
                            AvailableSeats = 200,
                            DepartureTime = new DateTime(2025, 2, 21, 0, 34, 39, 235, DateTimeKind.Utc).AddTicks(4880),
                            Destination = "Сочи",
                            FlightNumber = "SU1003"
                        },
                        new
                        {
                            Id = 4,
                            AirplanePhotoUrl = "https://wallpapers.com/images/hd/4k-planes-28pfplts81ps0e4h.jpg",
                            AirportId = 1,
                            ArrivalTime = new DateTime(2025, 2, 21, 7, 34, 39, 235, DateTimeKind.Utc).AddTicks(4883),
                            AvailableSeats = 220,
                            DepartureTime = new DateTime(2025, 2, 21, 3, 34, 39, 235, DateTimeKind.Utc).AddTicks(4882),
                            Destination = "Владивосток",
                            FlightNumber = "SU1004"
                        },
                        new
                        {
                            Id = 5,
                            AirplanePhotoUrl = "https://cdn.culture.ru/images/e47f7cd8-4712-5f93-93c7-ae9c96e2492c",
                            AirportId = 1,
                            ArrivalTime = new DateTime(2025, 2, 21, 2, 34, 39, 235, DateTimeKind.Utc).AddTicks(4885),
                            AvailableSeats = 130,
                            DepartureTime = new DateTime(2025, 2, 21, 1, 34, 39, 235, DateTimeKind.Utc).AddTicks(4885),
                            Destination = "Калининград",
                            FlightNumber = "SU1005"
                        },
                        new
                        {
                            Id = 6,
                            AirplanePhotoUrl = "https://exclusive.kz/wp-content/uploads/2022/06/126245.jpg",
                            AirportId = 2,
                            ArrivalTime = new DateTime(2025, 2, 21, 5, 34, 39, 235, DateTimeKind.Utc).AddTicks(4889),
                            AvailableSeats = 190,
                            DepartureTime = new DateTime(2025, 2, 21, 2, 34, 39, 235, DateTimeKind.Utc).AddTicks(4888),
                            Destination = "Новосибирск",
                            FlightNumber = "DP2001"
                        },
                        new
                        {
                            Id = 7,
                            AirplanePhotoUrl = "https://cdn1.ozone.ru/s3/multimedia-6/6447919386.jpg",
                            AirportId = 2,
                            ArrivalTime = new DateTime(2025, 2, 21, 4, 34, 39, 235, DateTimeKind.Utc).AddTicks(4891),
                            AvailableSeats = 160,
                            DepartureTime = new DateTime(2025, 2, 21, 1, 34, 39, 235, DateTimeKind.Utc).AddTicks(4891),
                            Destination = "Красноярск",
                            FlightNumber = "DP2002"
                        },
                        new
                        {
                            Id = 8,
                            AirplanePhotoUrl = "https://habrastorage.org/files/d7f/c1a/c07/d7fc1ac07c244551b7198a5caae9d687.jpg",
                            AirportId = 2,
                            ArrivalTime = new DateTime(2025, 2, 21, 8, 34, 39, 235, DateTimeKind.Utc).AddTicks(4893),
                            AvailableSeats = 210,
                            DepartureTime = new DateTime(2025, 2, 21, 4, 34, 39, 235, DateTimeKind.Utc).AddTicks(4892),
                            Destination = "Иркутск",
                            FlightNumber = "DP2003"
                        },
                        new
                        {
                            Id = 9,
                            AirplanePhotoUrl = "https://avatars.mds.yandex.net/get-mpic/5042167/img_id145303521372402621.jpeg/orig",
                            AirportId = 2,
                            ArrivalTime = new DateTime(2025, 2, 21, 7, 34, 39, 235, DateTimeKind.Utc).AddTicks(4895),
                            AvailableSeats = 180,
                            DepartureTime = new DateTime(2025, 2, 21, 3, 34, 39, 235, DateTimeKind.Utc).AddTicks(4894),
                            Destination = "Хабаровск",
                            FlightNumber = "DP2004"
                        },
                        new
                        {
                            Id = 10,
                            AirplanePhotoUrl = "https://s0.rbk.ru/v6_top_pics/media/img/3/57/754755745720573.jpg",
                            AirportId = 3,
                            ArrivalTime = new DateTime(2025, 2, 21, 3, 34, 39, 235, DateTimeKind.Utc).AddTicks(4897),
                            AvailableSeats = 170,
                            DepartureTime = new DateTime(2025, 2, 21, 1, 34, 39, 235, DateTimeKind.Utc).AddTicks(4897),
                            Destination = "Ростов-на-Дону",
                            FlightNumber = "VP3001"
                        },
                        new
                        {
                            Id = 11,
                            AirplanePhotoUrl = "https://cdnstatic.rg.ru/uploads/images/156/67/67/Depositphotos_41367457_m-2015.jpg",
                            AirportId = 3,
                            ArrivalTime = new DateTime(2025, 2, 21, 2, 34, 39, 235, DateTimeKind.Utc).AddTicks(4899),
                            AvailableSeats = 140,
                            DepartureTime = new DateTime(2025, 2, 21, 0, 34, 39, 235, DateTimeKind.Utc).AddTicks(4898),
                            Destination = "Минеральные Воды",
                            FlightNumber = "VP3002"
                        },
                        new
                        {
                            Id = 12,
                            AirplanePhotoUrl = "https://cdn1.ozone.ru/s3/multimedia-l/6450210693.jpgg",
                            AirportId = 3,
                            ArrivalTime = new DateTime(2025, 2, 21, 4, 34, 39, 235, DateTimeKind.Utc).AddTicks(4901),
                            AvailableSeats = 200,
                            DepartureTime = new DateTime(2025, 2, 21, 2, 34, 39, 235, DateTimeKind.Utc).AddTicks(4900),
                            Destination = "Казань",
                            FlightNumber = "VP3003"
                        },
                        new
                        {
                            Id = 13,
                            AirplanePhotoUrl = "https://www.ixbt.com/img/n1/news/2022/9/6/avia_large.png",
                            AirportId = 3,
                            ArrivalTime = new DateTime(2025, 2, 21, 3, 34, 39, 235, DateTimeKind.Utc).AddTicks(4902),
                            AvailableSeats = 160,
                            DepartureTime = new DateTime(2025, 2, 21, 1, 34, 39, 235, DateTimeKind.Utc).AddTicks(4902),
                            Destination = "Нижний Новгород",
                            FlightNumber = "VP3004"
                        },
                        new
                        {
                            Id = 14,
                            AirplanePhotoUrl = "https://i.pinimg.com/originals/1f/6f/88/1f6f88acd68ba05da46838932162a14b.jpg",
                            AirportId = 4,
                            ArrivalTime = new DateTime(2025, 2, 21, 4, 34, 39, 235, DateTimeKind.Utc).AddTicks(4904),
                            AvailableSeats = 180,
                            DepartureTime = new DateTime(2025, 2, 21, 2, 34, 39, 235, DateTimeKind.Utc).AddTicks(4904),
                            Destination = "Уфа",
                            FlightNumber = "MR4001"
                        },
                        new
                        {
                            Id = 15,
                            AirplanePhotoUrl = "https://cdn1.ozone.ru/multimedia/1022239843.jpg",
                            AirportId = 4,
                            ArrivalTime = new DateTime(2025, 2, 21, 6, 34, 39, 235, DateTimeKind.Utc).AddTicks(4907),
                            AvailableSeats = 190,
                            DepartureTime = new DateTime(2025, 2, 21, 3, 34, 39, 235, DateTimeKind.Utc).AddTicks(4906),
                            Destination = "Челябинск",
                            FlightNumber = "MR4002"
                        },
                        new
                        {
                            Id = 16,
                            AirplanePhotoUrl = "https://static.tildacdn.com/tild6666-3933-4737-b836-616635623763/samolety-krasivye-ka.jpg",
                            AirportId = 4,
                            ArrivalTime = new DateTime(2025, 2, 21, 3, 34, 39, 235, DateTimeKind.Utc).AddTicks(4909),
                            AvailableSeats = 150,
                            DepartureTime = new DateTime(2025, 2, 21, 1, 34, 39, 235, DateTimeKind.Utc).AddTicks(4908),
                            Destination = "Самара",
                            FlightNumber = "MR4003"
                        },
                        new
                        {
                            Id = 17,
                            AirplanePhotoUrl = "https://otvet.imgsmail.ru/download/4e9ff0c84d505cbb79586c493d25132e_h-324.jpg",
                            AirportId = 4,
                            ArrivalTime = new DateTime(2025, 2, 21, 5, 34, 39, 235, DateTimeKind.Utc).AddTicks(4911),
                            AvailableSeats = 170,
                            DepartureTime = new DateTime(2025, 2, 21, 2, 34, 39, 235, DateTimeKind.Utc).AddTicks(4910),
                            Destination = "Пермь",
                            FlightNumber = "MR4004"
                        },
                        new
                        {
                            Id = 18,
                            AirplanePhotoUrl = "https://img.goodfon.com/original/2388x1668/a/79/cathay-pacific-boeing-777.jpg",
                            AirportId = 4,
                            ArrivalTime = new DateTime(2025, 2, 21, 3, 34, 39, 235, DateTimeKind.Utc).AddTicks(4913),
                            AvailableSeats = 160,
                            DepartureTime = new DateTime(2025, 2, 21, 1, 34, 39, 235, DateTimeKind.Utc).AddTicks(4913),
                            Destination = "Волгоград",
                            FlightNumber = "MR4005"
                        },
                        new
                        {
                            Id = 19,
                            AirplanePhotoUrl = "https://s9.travelask.ru/uploads/post/000/026/337/main_image/facebook-3c16fde96f14711ae2a04a727c4025c1.jpg",
                            AirportId = 5,
                            ArrivalTime = new DateTime(2025, 2, 21, 7, 34, 39, 235, DateTimeKind.Utc).AddTicks(4915),
                            AvailableSeats = 200,
                            DepartureTime = new DateTime(2025, 2, 21, 4, 34, 39, 235, DateTimeKind.Utc).AddTicks(4915),
                            Destination = "Омск",
                            FlightNumber = "NS5001"
                        },
                        new
                        {
                            Id = 20,
                            AirplanePhotoUrl = "https://www.atorus.ru/sites/default/files/styles/head_carousel/public/2021-09/131872.jpg.webp?itok=w02d3ccD",
                            AirportId = 5,
                            ArrivalTime = new DateTime(2025, 2, 21, 6, 34, 39, 235, DateTimeKind.Utc).AddTicks(4917),
                            AvailableSeats = 180,
                            DepartureTime = new DateTime(2025, 2, 21, 3, 34, 39, 235, DateTimeKind.Utc).AddTicks(4916),
                            Destination = "Барнаул",
                            FlightNumber = "NS5002"
                        },
                        new
                        {
                            Id = 21,
                            AirplanePhotoUrl = "https://cdn1.ozone.ru/s3/multimedia-i/6449418186.jpg",
                            AirportId = 5,
                            ArrivalTime = new DateTime(2025, 2, 21, 5, 34, 39, 235, DateTimeKind.Utc).AddTicks(4919),
                            AvailableSeats = 190,
                            DepartureTime = new DateTime(2025, 2, 21, 2, 34, 39, 235, DateTimeKind.Utc).AddTicks(4918),
                            Destination = "Тюмень",
                            FlightNumber = "NS5003"
                        },
                        new
                        {
                            Id = 22,
                            AirplanePhotoUrl = "https://img5tv.cdnvideo.ru/webp/shared/files/202102/1_1263737.jpg",
                            AirportId = 5,
                            ArrivalTime = new DateTime(2025, 2, 21, 3, 34, 39, 235, DateTimeKind.Utc).AddTicks(4920),
                            AvailableSeats = 150,
                            DepartureTime = new DateTime(2025, 2, 21, 1, 34, 39, 235, DateTimeKind.Utc).AddTicks(4920),
                            Destination = "Махачкала",
                            FlightNumber = "NS5004"
                        },
                        new
                        {
                            Id = 23,
                            AirplanePhotoUrl = "https://static.life.ru/publications/2022/2/25/622639184735.0912.png",
                            AirportId = 5,
                            ArrivalTime = new DateTime(2025, 2, 21, 9, 34, 39, 235, DateTimeKind.Utc).AddTicks(4922),
                            AvailableSeats = 210,
                            DepartureTime = new DateTime(2025, 2, 21, 5, 34, 39, 235, DateTimeKind.Utc).AddTicks(4922),
                            Destination = "Улан-Удэ",
                            FlightNumber = "NS5005"
                        },
                        new
                        {
                            Id = 24,
                            AirplanePhotoUrl = "https://i.pinimg.com/originals/5d/47/b3/5d47b3b01b41bbd587043be61b4f5230.jpg",
                            AirportId = 5,
                            ArrivalTime = new DateTime(2025, 2, 21, 6, 34, 39, 235, DateTimeKind.Utc).AddTicks(4924),
                            AvailableSeats = 160,
                            DepartureTime = new DateTime(2025, 2, 21, 3, 34, 39, 235, DateTimeKind.Utc).AddTicks(4923),
                            Destination = "Сыктывкар",
                            FlightNumber = "NS5006"
                        });
                });

            modelBuilder.Entity("FM.DataAccess.Entities.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PermissionEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("FM.DataAccess.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("FM.DataAccess.Entities.RolePermissionEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissionEntity");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 3
                        });
                });

            modelBuilder.Entity("FM.DataAccess.Entities.ServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 10.00m,
                            Name = "Meal"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 20.00m,
                            Name = "Extra Luggage"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 15.00m,
                            Name = "Priority Boarding"
                        },
                        new
                        {
                            Id = 4,
                            Cost = 5.00m,
                            Name = "In-Flight Entertainment"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 12.00m,
                            Name = "Wi-Fi Access"
                        },
                        new
                        {
                            Id = 6,
                            Cost = 25.00m,
                            Name = "Extra Legroom Seat"
                        },
                        new
                        {
                            Id = 7,
                            Cost = 30.00m,
                            Name = "Airport Transfer"
                        },
                        new
                        {
                            Id = 8,
                            Cost = 18.00m,
                            Name = "Travel Insurance"
                        },
                        new
                        {
                            Id = 9,
                            Cost = 40.00m,
                            Name = "Lounge Access"
                        },
                        new
                        {
                            Id = 10,
                            Cost = 12.00m,
                            Name = "Special Meal Request"
                        });
                });

            modelBuilder.Entity("FM.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FM.DataAccess.Entities.UserRoleEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleEntity");
                });

            modelBuilder.Entity("TicketEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FlightId")
                        .HasColumnType("integer");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Seat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("TicketType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FlightId = 1,
                            Price = 150f,
                            Seat = "A1",
                            TicketType = 1
                        },
                        new
                        {
                            Id = 2,
                            FlightId = 1,
                            Price = 300f,
                            Seat = "B1",
                            TicketType = 2
                        },
                        new
                        {
                            Id = 3,
                            FlightId = 2,
                            Price = 180f,
                            Seat = "C1",
                            TicketType = 1
                        },
                        new
                        {
                            Id = 4,
                            FlightId = 2,
                            Price = 500f,
                            Seat = "D1",
                            TicketType = 3
                        },
                        new
                        {
                            Id = 5,
                            FlightId = 3,
                            Price = 160f,
                            Seat = "E1",
                            TicketType = 1
                        },
                        new
                        {
                            Id = 6,
                            FlightId = 3,
                            Price = 320f,
                            Seat = "F1",
                            TicketType = 2
                        },
                        new
                        {
                            Id = 7,
                            FlightId = 4,
                            Price = 170f,
                            Seat = "G1",
                            TicketType = 1
                        },
                        new
                        {
                            Id = 8,
                            FlightId = 4,
                            Price = 550f,
                            Seat = "H1",
                            TicketType = 3
                        },
                        new
                        {
                            Id = 9,
                            FlightId = 5,
                            Price = 190f,
                            Seat = "I1",
                            TicketType = 1
                        },
                        new
                        {
                            Id = 10,
                            FlightId = 5,
                            Price = 330f,
                            Seat = "J1",
                            TicketType = 2
                        });
                });

            modelBuilder.Entity("TicketServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ServiceId = 1,
                            TicketId = 1
                        },
                        new
                        {
                            Id = 2,
                            ServiceId = 2,
                            TicketId = 1
                        },
                        new
                        {
                            Id = 3,
                            ServiceId = 3,
                            TicketId = 1
                        },
                        new
                        {
                            Id = 4,
                            ServiceId = 1,
                            TicketId = 2
                        },
                        new
                        {
                            Id = 5,
                            ServiceId = 2,
                            TicketId = 2
                        },
                        new
                        {
                            Id = 6,
                            ServiceId = 3,
                            TicketId = 3
                        },
                        new
                        {
                            Id = 7,
                            ServiceId = 4,
                            TicketId = 4
                        },
                        new
                        {
                            Id = 8,
                            ServiceId = 1,
                            TicketId = 5
                        },
                        new
                        {
                            Id = 9,
                            ServiceId = 2,
                            TicketId = 5
                        },
                        new
                        {
                            Id = 10,
                            ServiceId = 5,
                            TicketId = 5
                        },
                        new
                        {
                            Id = 11,
                            ServiceId = 6,
                            TicketId = 5
                        },
                        new
                        {
                            Id = 12,
                            ServiceId = 6,
                            TicketId = 6
                        },
                        new
                        {
                            Id = 13,
                            ServiceId = 7,
                            TicketId = 7
                        },
                        new
                        {
                            Id = 14,
                            ServiceId = 8,
                            TicketId = 8
                        },
                        new
                        {
                            Id = 15,
                            ServiceId = 9,
                            TicketId = 9
                        },
                        new
                        {
                            Id = 16,
                            ServiceId = 10,
                            TicketId = 10
                        });
                });

            modelBuilder.Entity("AirportEntity", b =>
                {
                    b.HasOne("FM.DataAccess.Entities.FederalDistrictEntity", "FederalDistrict")
                        .WithMany("Airports")
                        .HasForeignKey("FederalDistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FederalDistrict");
                });

            modelBuilder.Entity("FM.DataAccess.Entities.FlightEntity", b =>
                {
                    b.HasOne("AirportEntity", "Airport")
                        .WithMany("Flights")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("FM.DataAccess.Entities.RolePermissionEntity", b =>
                {
                    b.HasOne("FM.DataAccess.Entities.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM.DataAccess.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FM.DataAccess.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("FM.DataAccess.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketEntity", b =>
                {
                    b.HasOne("FM.DataAccess.Entities.FlightEntity", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("TicketServiceEntity", b =>
                {
                    b.HasOne("FM.DataAccess.Entities.ServiceEntity", "Service")
                        .WithMany("TicketService")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketEntity", "Ticket")
                        .WithMany("Services")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("AirportEntity", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FM.DataAccess.Entities.FederalDistrictEntity", b =>
                {
                    b.Navigation("Airports");
                });

            modelBuilder.Entity("FM.DataAccess.Entities.FlightEntity", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("FM.DataAccess.Entities.ServiceEntity", b =>
                {
                    b.Navigation("TicketService");
                });

            modelBuilder.Entity("TicketEntity", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
